#pragma once

#include "CoreMinimal.h"
#include "JsObject.h"
#include "Binding.hpp"
#include "Defines.h"
#include "TemplateBindingGenerator.h"

UsingCppType($WidgetClass$);
UsingTSharedPtr($WidgetClass$);
UsingTSharedRef($WidgetClass$);

class $$WidgetClass$ :public $WidgetClass$
{
public:
	static TSharedPtr<$WidgetClass$> $MakeShared()
	{
		return ::MakeShared<$WidgetClass$>();
	}
	static void $SAssignNew(TSharedPtr<$WidgetClass$>&ExposeAs, FJsObject JsObject, FString Filename = "")
	{
		ExposeAs = $SNew(JsObject, Filename);
	}
	static TSharedPtr<$WidgetClass$> $SNew(FJsObject JsObject, FString Filename = "")
	{
		$WidgetClass$::FArguments Arguments;

		return MakeTDecl<$WidgetClass$>("$WidgetClass$", TCHAR_TO_ANSI(*Filename), 0, RequiredArgs::MakeRequiredArgs()) <<= Arguments;
	}

public:
};
UsingCppType($$WidgetClass$);

struct AutoRegister_$WidgetClass$
{
	void RegisterArguments()
	{
		FWidgetArguments Arguments;

		UTemplateBindingGenerator::RegisterWidgetArgumentType("$WidgetClass$", Arguments);
	}

	AutoRegister_$WidgetClass$()
	{
		RegisterArguments();

		puerts::DefineClass<$WidgetClass$>()
			//.Extends<ParentClass>()
			.Function("SNew", MakeFunction(&$$WidgetClass$::$SNew))
			.Function("SAssignNew", MakeFunction(&$$WidgetClass$::$SAssignNew))
			.Function("MakeShared", MakeFunction(&$$WidgetClass$::$MakeShared))
			.Register();

		RegisterTSharedPtr($WidgetClass$);
	}
};

AutoRegister_$WidgetClass$ _AutoRegister_$WidgetClass$;